#+TITLE:     On the Role of Context in the Design of Mobile Mashups 
#+AUTHOR:    Valerio Cassani, Sefano Gianelli, Riccardo Medana, Maristella Matera, Elisa Quintarelli, Letizia Tanca, Vittorio Zaccaria
#+INCLUDE:   le_header_modern.org

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

#+BEGIN_SRC emacs-lisp :exports none
(setq
     org-latex-image-default-width nil
     org-latex-pdf-process
        '("/usr/texbin/lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "/usr/texbin/bibtex %b"
          "/usr/texbin/lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "/usr/texbin/lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
      )
#+END_SRC

#+RESULTS:
| /usr/texbin/lualatex -shell-escape -interaction nonstopmode -output-directory %o %f | /usr/texbin/bibtex %b | /usr/texbin/lualatex -shell-escape -interaction nonstopmode -output-directory %o %f | /usr/texbin/lualatex -shell-escape -interaction nonstopmode -output-directory %o %f |

* Introduction
** What is this about?

- *An experiment*: building an app that dynamically collects, integrates and adapts data to the users’ situational needs.

- a.k.a: *CAMUS* (Context-Aware Mobile mashUpS)

** Motivation                                                 

Bridging the best of two worlds:

- *Context*: situational model; it allows to  
  identify pertinent data sources taking into account current users’ needs

- *Mashup*: lightweight integration of heterogeneous data deployed into a mobile
  app.

** Case study: tourism domain

- *Goal*: implement a mobile app for tourists that allows to query useful
  services based on their interest/intent but still moderated by the tour operator.

- *Other requirements*: the services to be queried and the result mashup is guided by a
  domain expert

* Core functionality
** Context tree

Design-time representation of the possible situations of use.

\begin{tikzpicture}[>=stealth,font=\tiny,
  every node/.style={circle, draw, minimum size=0.75cm},
  dimension/.style={fill=black, text=white},
      parameter/.style={thick,double,minimum size=0.25cm}
]
\graph [tree layout, grow=down, fresh nodes, level distance=0.5in, sibling distance=0.5in]
    {
        r -> {
          $d_1$ [dimension] -> { $c_{1,1}$, "..." -> $p_{1,2}$ [parameter] , "..."},
          $d_2$ [dimension] -> { "...", "..." },
          $d_3$ [dimension] -> { "...", "..." }
        }
    };
\end{tikzpicture}

where \tikz{\fill[black] (0,0) circle[radius=.5ex]} is called *dimension*, 
      \tikz{\draw (0,0) circle[radius=.5ex]} is called *concept[fn:1]* and
      \tikz{\draw[thick,double] (0,0) circle[radius=.5ex]} is called *parameter*.

** Example

\begin{tikzpicture}[>=stealth,font=\tiny,
  every node/.style={circle, draw, minimum size=0.75cm},
  dimension/.style={fill=black, text=white},
      parameter/.style={thick,double,minimum size=0.25cm}
]
\graph [tree layout, grow=down, fresh nodes, level distance=0.5in, sibling distance=0.5in]
    {
        r -> {
          time [dimension] -> {morning, noon, evening, night},
          interest [dimension] -> { 
                  cinema -> { genre   [dimension] -> {
                                      thriller, comedy, "..."
                                      }, 
                              length [dimension], 
                              "..." [dimension]
                            },
                  food   -> { cuisine [dimension] -> { veggie, "..." } },
          },
          position [dimension] -> { lat -> " " [parameter], long -> " " [parameter] }
        }
    };
\end{tikzpicture}


** Context tree instance


- Given a context tree $\mathcal{T}$, each user $u$ will be characterized by a context tree instance 
  $t_u : \mathcal{T}$.

- $t_u$ will dynamically vary over time but it should be well-formed, i.e., it should have
  at least an interest topic, e.g:

- Example of $t_u$:
  #+begin_example
  { 
      interest: "restaurant.veggie", 
      position: (43.1, 12.1), 
      time: "noon"
  } 
  #+end_example

** Target run time architecture

Two tier architecture to optimize bandwidth usage.

#+name: e1
#+begin_src plantuml :file images/runtime.png :exports results :cache yes
@startuml
scale 900 width
control "External services"
control "Server"
actor "End user"
"Server" -> "End user" : (on login) download mashup schema 
"End user" -> "Server" : context tree instance
"Server" -> "Server" : service selection (context tree access)
"Server" -> "External services" : requests data
"External services" -> "Server" : data
"Server" -> "End user" : mashup data
@enduml
#+end_src

#+BEGIN_CENTER
#+ATTR_LATEX: :center t :height 5cm
#+RESULTS[3cae167f429329360656a0979a0f95eeeb11b67c]: e1
[[file:images/runtime.png]]
#+END_CENTER

** Principal purpose 

The *principal purpose* of the system is to provide a way to map $t_u$ to an 
ordered set of queries to services needed to satisfy the original goal:

\begin{equation}
\mathcal{C}: \mathcal{T} \rightarrow \mathcal{P}(O)
\end{equation}

* Service selection, query and data aggregation
** Primary services

They are queried to *fulfill* the original intent of the user ($t_u$). 

#+begin_example
CONTEXT                       SERVICES
time = noon,                  veggieapi.com
interest = restaurant    =>   places.com?type=veg
restaurant = vegetarian       thefork?type=veggie 
#+end_example

** Primary service association

Each enum's leaf $L$ has a set $O_L$ of operations associated with it. Each 
operation describes a request template to a service $s$. E.g:

\begin{equation}
O_{\textrm{restaurant.vegetarian}}= \{ o_{\textrm{thefork?type=veggie}}, o_{\textrm{veggieapi}}, \ldots \}
\end{equation}

All the possible operations in the system belong to the service repository $O$:

\begin{equation}
O = O_{L1} \cup O_{L2} \cup \ldots O_{Ln}
\end{equation}

** Primary services data mashup

- Each service has its own representation of data which should be made
  homogeneous before being sent to the client

- Each response field is mapped to a *term* that allows to individuate
  semantically similar items.

- Reconciliation and duplicate removal is used to remove duplicate items.

** Service selection

The mapping is done by categorizing leafs parents as:

- *ranking*: leafs value in $t_u$ will influence the order of services in the result (e.g., =position=)

- *filter*: if a leaf is present in $t_u$, it excludes services from all the siblings (e.g, if
  =vegetarian : restaurant= is present, it excludes all other restaurant types).
 
** Support services

They provide the user with *additional useful information*

#+begin_example
CONTEXT                       SERVICES
time = evening,               maps.google.com 
interest = restaurant    =>   restaurantreviews.com
restaurant = vegetarian       uber.com
#+end_example

Can be accessed either via *deep-linking* or *web-linking*.

** Mashup schema

- Describes how data should be visualized on the mobile device, for both *list*
  and *detail* views.

- It is downloaded at login and guides the view creation once results are
  received.

- Example:

  #+begin_example
  CONTEXT                       MASHUP (DETAILS)
  ...                           name: text
  interest = restaurant    =>   address: text
  ...                           (long, lat): map 
  #+end_example

* Client and Server implementation
** Requirements 

- *Minimize bandwidth usage*: ask only for what you need

- *Custom response types*: different context may need different types of data

- *Native app feeling*: native app still better performance-wise and battery-wise.

** 
file:./images/jsatt.jpg 

** GraphQL 

- Data-fetching API that returns JSON
- Query defines a data shape
  - easy to add field leaving existing clients unaffected
  - optimal bandwidth usage
- It can be hierarchical: it naturally follows relationships between objects

** GraphQL example

#+begin_src js 
executeQuery(id: "56975a1bd5704e0d0d815869", t_u) { shape }
#+end_src 

where =t_u= is a json-like representation of $t_u$, while 
*shape* describes the data set needed:


#+begin_src js
  primaryResults {
      edges {
          node {
              title,
              address,
              telephone,
              website
          }
      }
  }
#+end_src

** React and React Native

- React abstracts away the DOM, giving a simpler programming model and better performance 

- It implements one-way reactive data flow which reduces boilerplate and is easier to reason about than traditional data binding

** React Native / Example

#+begin_src js
class App extends Component {
  render() {
    return (
      <TabBarIOS>
        <TabBarIOS.Item title="React Native" selected={true}>
          <NavigatorIOS initialRoute={{ title: 'React Native' }} />
        </TabBarIOS.Item>
      </TabBarIOS>
    );
  }
}
#+end_src

* Live Demo

* Performance evaluation
** Time breakout 

#+begin_center
file:./images/component_time.pdf
#+end_center

** Scaling 

#+begin_center
file:./images/exponential_analysis.pdf
#+end_center

* Conclusions
** What still needs to be done

- Better formalization of the query represented by the context

- Extension to services with a SOAP interface


* Detailed description
** Administrator and domain expert roles

#+begin_src plantuml :file images/designtime.png :exports results :cache yes
@startuml
scale 900 width
actor "Administrator"
control "Server"
actor "Domain expert"
"Administrator" -> "Server" : add context tree 
"Administrator" -> "Server" : associate services to CDT nodes
"Domain expert" -> "Server" : add mashup schema 
@enduml
#+end_src

#+BEGIN_CENTER
#+RESULTS[fd20709dd34f947ebf4e7ef25e9ea60629e45615]:
#+ATTR_LATEX: :center t :height 5cm
#+END_CENTER

* Footnotes

[fn:1] Except the root.
